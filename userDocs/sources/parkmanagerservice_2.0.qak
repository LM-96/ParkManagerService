System carparking

Request	enter 		: 	enter(X)
Reply	slotnum 	: 	slotnum(SLOTNUM)

Dispatch canEnterCar : canEnterCar(X)

Request	carenter	:	carenter(SLOTNUM)
Reply	token		:	token(TOKEN)

Request pickup		:	pickup(TOKEN)
Reply	canPickup	:	canPickup(X)

Dispatch dtfreeReached : dtfreeReached(X)
Dispatch itoccReached : itoccReached(X)
Dispatch startDtfreeCounter : startDtfreeCounter(X)
Dispatch startItoccCounter : startItoccCounter(X)

Context ctxcarparking ip[host="localhost" port=8000]

QActor parkingservicegui context ctxcarparking {
	
	[# 	var RECEIVED_SLOTNUM = 0
		var MY_TOKEN = 0
		val state = it.unibo.parkingstate.MockState
	#]
	
	State s0 initial {
		println("$name | started")
	} Goto requestToEnter
	
	State requestToEnter {
		request parkingmanagerservice -m enter : enter(hello)
		println("$name | sended request to enter")
	} Transition t
		whenReply slotnum -> receivedSlotnum
	
	State receivedSlotnum {
		printCurrentMessage
		onMsg (slotnum : slotnum(SLOTNUM)) {
			[# RECEIVED_SLOTNUM = payloadArg(0).toInt() #]
			println("$name | received reply with SLOTNUM=$RECEIVED_SLOTNUM")
		}
	} Goto waitMoveToIndoor if [# RECEIVED_SLOTNUM > 0 #] else noAvailableSlot
	
	State waitMoveToIndoor {
		println("$name | client is waiting the idoor is free")
	} Transition t
		whenMsg canEnterCar -> moveTheCar
	
	State moveTheCar {
		
		//Simulate client is entering the car into the indoor
		delay 5000
		[# state.setIndoorState(`it.unibo.parkingstate`.DoorState.OCCUPIED) #]
		println("$name | client has moved the car in the INDOOR")
		
		request parkingmanagerservice -m carenter : carenter($RECEIVED_SLOTNUM)
		println("$name | client has press CARENTER")
	} Transition t
		whenReply token -> receivedToken
	
	State receivedToken {
		printCurrentMessage
		onMsg (token : token(TOKEN)) {
			[# MY_TOKEN = payloadArg(0).toInt() #]
			println("$name | received reply with TOKEN=$MY_TOKEN")
		}
	} Goto requestToPickUp
	
	State requestToPickUp {
		delay 5000
		request parkingmanagerservice -m pickup : pickup($MY_TOKEN)
		println("$name | client has required to pickup the car")
	} Transition t
		whenReply canPickup -> waitPickupConfirm
	
	State waitPickupConfirm {
		printCurrentMessage
		println("$name | client is going to pick up his car")
	} Goto pickup
	
	State pickup{
		
		//Simulate client have pick up his car from the outdoor-area
		delay 5000
		[# state.setOutdoorState(`it.unibo.parkingstate`.DoorState.FREE) #]
		
		println("$name | client has picked up his car")
	}
	
	State noAvailableSlot {
		println("$name | no slot available... i go elsewhere or retry later")
	}
}

QActor parkingmanagerservice context ctxcarparking {
	
	[#  val SLOT_MANAGER = it.unibo.parkingslot.SimpleParkingSlotManager(1)
		val state = it.unibo.parkingstate.MockState #]
	
	State s0 initial {
		println("$name | started")
	} Goto work
	
	State work {
		println("$name | waiting for request...")
	} Transition t
		whenRequest enter -> handleEnter
		whenRequest carenter -> handleCarEnter
		whenRequest pickup -> handlePickup
	
	State handleEnter {
		printCurrentMessage
		[# var SLOTNUM = SLOT_MANAGER.getFreeSlot() #]
		println("$name | replying enter request win [SLOTNUM = $SLOTNUM]")
		replyTo enter with slotnum : slotnum($SLOTNUM)
	} Goto checkIndoorFree
	
	State checkIndoorFree {
		[# if(state.getIndoorState().equals(`it.unibo.parkingstate`.DoorState.FREE)) { #]
			forward parkingservicegui -m canEnterCar : canEnterCar(OK)
			forward itocccounter -m startItoccCounter : startItoccCounter(START)
		[# } else { #]
			println("$name | indoor-Area is already engaged")
			//TODO: if indoor area is already engaged...
		[# } #]
	} Goto work
	
	State handleCarEnter {
		printCurrentMessage
		onMsg(carenter : carenter(SLOTNUM)) {
			[# 	if(state.getIndoorState().equals(`it.unibo.parkingstate`.DoorState.FREE)) { 
			#]
				println("$name | client has not moved the car into the indoor")
				//TODO: see NotifyInterest alternative scenario
				
			[# } else {
				var TOKEN = payloadArg(0).toInt()
				SLOT_MANAGER.occupySlot(TOKEN)	#]
			println("$name | generated TOKEN=$TOKEN")
			replyTo carenter with token:token($TOKEN)
			
			//Simulate trolley has take the car
			println("$name | trolley will take the car")
			[# 	state.setIndoorState(`it.unibo.parkingstate`.DoorState.FREE) } #]
		}
	} Goto work
	
	State handlePickup {
		printCurrentMessage
		onMsg(pickup : pickup(TOKEN)) {
			[# 	var TOKEN = payloadArg(0) 
				var slotnum_free = SLOT_MANAGER.freeSlotByToken(TOKEN) #]
			
			[# 	if(state.getOutdoorState().equals(`it.unibo.parkingstate`.DoorState.FREE)) { 
				state.setOutdoorState(`it.unibo.parkingstate`.DoorState.OCCUPIED)
			#]
					println("$name | trolley will transport car in the outdoor")
					replyTo pickup with canPickup : canPickup(OK)
					println("$name | slot $slotnum_free is going to be free")
					forward dtfreecounter -m startDtfreeCounter : startDtfreeCounter(START)
				
			[# } else { #]
					println("$name | the outdoor is already engaged by another car... please wait")
					//TODO: if outdoor area is already engaged?
				
			[# } #]
		}
	} Goto work
}


QActor itocccounter context ctxcarparking {
	
	[# 	
		val state : it.unibo.parkingstate.StateReader = it.unibo.parkingstate.MockState
		val ITOCC = 2000L
	#]
	
	State s0 initial {
		println("$name | started")
	} Goto work
	
	State work {
		println("$name | working...")
	} Transition t
		whenMsg startItoccCounter -> count
	
	State count {
		println("$name | start ITOCC count...")
	} Transition t
		whenTimeVar ITOCC -> reached
		whenMsg startItoccCounter -> count
		
	State reached {
		[# if(state.getIndoorState().equals(`it.unibo.parkingstate`.DoorState.FREE)) {#]
			//forward parkingservicegui -m itoccReached : itoccReached(REACHED)
			//TODO: how to notify to the client
			println("$name | ITOCC reached and indoor is free... Client should be notified")
		[# } #]
	} Goto work
}

QActor dtfreecounter context ctxcarparking {
	[# 	
		val state : it.unibo.parkingstate.StateReader = it.unibo.parkingstate.MockState
		val DTFREE = 2000L
	#]
	
	State s0 initial {
		println("$name | started")
	} Goto work
	
	State work {
		println("$name | working...")
	} Transition t
		whenMsg startDtfreeCounter -> count
	
	State count {
		println("$name | start DTFREE count...")
	} Transition t
		whenTimeVar DTFREE -> reached
		whenMsg startDtfreeCounter -> count
	
	State reached {
		[# if(state.getOutdoorState().equals(`it.unibo.parkingstate`.DoorState.OCCUPIED)) {#]
			forward parkingservicestatusgui -m dtfreeReached : dtfreeReached(REACHED)
			println("$name | DTFREE reached and outdoor is occupied... Manager has been notified")
		[# } #]
	} Goto work
}

QActor parkingservicestatusgui context ctxcarparking {
	State s0 initial {
		println("$name | started")
	} Goto work
	
	State work {
		println("$name | working")
	} Transition t
		whenMsg dtfreeReached -> receivedDtfreeAlarm
	
	State receivedDtfreeAlarm {
		println("$name | the manager has been notified for DTFREE reached")
	} Goto work
}