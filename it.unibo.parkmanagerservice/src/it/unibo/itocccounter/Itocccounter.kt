/* Generated by AN DISI Unibo */ 
package it.unibo.itocccounter

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Itocccounter ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 	
				val ITOCC = it.unibo.parkmanagerservice.bean.Timers.get().ITOCC
				var REACHED = false
				var JSON = "{\"state\":\"INIT\"}"
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("$name | started")
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						 
									if(REACHED) {
										REACHED = false
										var JSON = "{\"state\":\"REACHED\"}"
									} else { 
										JSON = "{\"state\":\"WORK\"}"
									}  
						updateResourceRep( JSON  
						)
						println("$name | waiting for command")
					}
					 transition(edgeName="t7",targetState="count",cond=whenDispatch("startItoccCounter"))
					transition(edgeName="t8",targetState="work",cond=whenDispatch("stopCount"))
				}	 
				state("count") { //this:State
					action { //it:State
						println("$name | start ITOCC count...")
						 JSON = "{\"state\":\"COUNTING\"}"  
						updateResourceRep( JSON  
						)
						stateTimer = TimerActor("timer_count", 
							scope, context!!, "local_tout_itocccounter_count", ITOCC )
					}
					 transition(edgeName="t9",targetState="reached",cond=whenTimeout("local_tout_itocccounter_count"))   
					transition(edgeName="t10",targetState="count",cond=whenDispatch("startItoccCounter"))
					transition(edgeName="t11",targetState="work",cond=whenDispatch("stopCount"))
				}	 
				state("reached") { //this:State
					action { //it:State
						println("$name | ITOCC reached")
						 REACHED = true  
						emit("itoccReached", "itoccReached(REACHED)" ) 
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
}
