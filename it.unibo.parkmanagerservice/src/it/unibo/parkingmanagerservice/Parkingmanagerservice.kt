/* Generated by AN DISI Unibo */ 
package it.unibo.parkingmanagerservice

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Parkingmanagerservice ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		  
				it.unibo.parkmanagerservice.persistence.ParkingRepositories.createBasics(6)
				val userRepo = it.unibo.parkmanagerservice.persistence.ParkingRepositories.getUserRepository()
				val slotRepo = it.unibo.parkmanagerservice.persistence.ParkingRepositories.getParkingSlotRepository()
				val state = it.unibo.parkingstate.MockState
				var USER : it.unibo.parkmanagerservice.bean.User
				var SLOT : it.unibo.parkmanagerservice.bean.ParkingSlot?
				var SLOTNUM : Long = 0
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("$name | started")
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						println("$name | waiting for request...")
						updateResourceRep( "work"  
						)
					}
					 transition(edgeName="t0",targetState="handleEnter",cond=whenRequest("enter"))
					transition(edgeName="t1",targetState="handleCarEnter",cond=whenRequest("carenter"))
					transition(edgeName="t2",targetState="handlePickup",cond=whenRequest("pickup"))
				}	 
				state("handleEnter") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						 SLOTNUM = 0  
						if( checkMsgContent( Term.createTerm("enter(NAME,SURNAME,MAIL)"), Term.createTerm("enter(NAME,SURNAME,MAIL)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												USER = `it.unibo.parkmanagerservice`.bean.User(name = payloadArg(0), 
														surname = payloadArg(1), mail = payloadArg(2),
														state = `it.unibo.parkmanagerservice`.bean.UserState.INTERESTED,
														time = java.sql.Timestamp(System.currentTimeMillis())
												)
												
												SLOT = slotRepo?.getFirstFree()
												if(SLOT != null) {
													SLOT!!.slotstate = `it.unibo.parkmanagerservice`.bean.ParkingSlotState.RESERVED
													SLOT!!.user = USER
													SLOTNUM = SLOT!!.slotnum
													userRepo?.create(USER)
													slotRepo?.update(SLOT!!)
												}
						}
						println("$name | replying enter request with [SLOTNUM = $SLOTNUM]")
						answer("enter", "slotnum", "slotnum($SLOTNUM)"   )  
						updateResourceRep( "reply with SLOTNUM=$SLOTNUM"  
						)
					}
					 transition( edgeName="goto",targetState="checkIndoorFree", cond=doswitchGuarded({ SLOTNUM > 0  
					}) )
					transition( edgeName="goto",targetState="work", cond=doswitchGuarded({! ( SLOTNUM > 0  
					) }) )
				}	 
				state("checkIndoorFree") { //this:State
					action { //it:State
						 if(state.getIndoorState().equals(`it.unibo.parkingstate`.DoorState.FREE)) { 
									state.setIndoorState(`it.unibo.parkingstate`.DoorState.OCCUPIED)  
						updateResourceRep( "canEnterCar(OK)"  
						)
						forward("startItoccCounter", "startItoccCounter(START)" ,"itocccounter" ) 
						 } else {  
						println("$name | indoor-Area is already engaged")
						updateResourceRep( "canEnterCar(WAIT)"  
						)
						 }  
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("handleCarEnter") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("carenter(SLOTNUM)"), Term.createTerm("carenter(SLOTNUM)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 	if(state.getWeightFromSensor() <= 0) { 
								println("$name | client has not moved the car into the indoor")
								 } else {
												var TOKEN = payloadArg(0).toInt()
												state.getParkingSlotManager().occupySlot(TOKEN)	 
								forward("stopCount", "stopCount(STOP)" ,"itocccounter" ) 
								println("$name | generated TOKEN=$TOKEN")
								answer("carenter", "token", "token($TOKEN)"   )  
								updateResourceRep( "reply with TOKEN=$TOKEN"  
								)
								println("$name | trolley will take the car")
								 	state.setIndoorState(`it.unibo.parkingstate`.DoorState.FREE) } 
												state.setWeightOnSensor(0.0)
						}
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("handlePickup") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("pickup(TOKEN)"), Term.createTerm("pickup(TOKEN)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 	var TOKEN = payloadArg(0) 
												var slotnum_free = state.getParkingSlotManager().freeSlotByToken(TOKEN) 
												 if(slotnum_free == -1) {
								answer("pickup", "canPickup", "canPickup(INVALIDTOK)"   )  
								updateResourceRep( "canPickup(INVALIDTOK)" 
								)
								 	} else {
													if(state.getOutdoorState().equals(`it.unibo.parkingstate`.DoorState.FREE)) { 
													state.setOutdoorState(`it.unibo.parkingstate`.DoorState.OCCUPIED)
								println("$name | trolley will transport car in the outdoor")
								answer("pickup", "canPickup", "canPickup(OK)"   )  
								println("$name | slot $slotnum_free is going to be free")
								forward("startDtfreeCounter", "startDtfreeCounter(START)" ,"dtfreecounter" ) 
								updateResourceRep( "canPickup(OK)"  
								)
								 		} else {  
								println("$name | the outdoor is already engaged by another car... please wait")
								answer("pickup", "canPickup", "canPickup(WAIT)"   )  
								updateResourceRep( "canPickup(WAIT)" 
								)
								 		}
												}				
						}
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
}
