/* Generated by AN DISI Unibo */ 
package it.unibo.dtfreecounter

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Dtfreecounter ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 	
				val DTFREE = it.unibo.parkmanagerservice.bean.Timers.get().DTFREE
				var REACHED = false
				var JSON = "{\"state\":\"INIT\"}"
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("$name | started")
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						 
									if(REACHED) {
										REACHED = false
										JSON = "{\"state\":\"REACHED\"}"
								  	} else {
								  		JSON = "{\"state\":\"WORK\"}"
								  	}  
						updateResourceRep( JSON  
						)
						println("$name | waiting for command")
					}
					 transition(edgeName="t12",targetState="count",cond=whenDispatch("startDtfreeCounter"))
					transition(edgeName="t13",targetState="work",cond=whenDispatch("stopCount"))
				}	 
				state("count") { //this:State
					action { //it:State
						println("$name | start DTFREE count...")
						 JSON = "{\"state\":\"COUNTING\"}"  
						updateResourceRep( JSON  
						)
						stateTimer = TimerActor("timer_count", 
							scope, context!!, "local_tout_dtfreecounter_count", DTFREE )
					}
					 transition(edgeName="t14",targetState="reached",cond=whenTimeout("local_tout_dtfreecounter_count"))   
					transition(edgeName="t15",targetState="count",cond=whenDispatch("startDtfreeCounter"))
					transition(edgeName="t16",targetState="work",cond=whenDispatch("stopCount"))
				}	 
				state("reached") { //this:State
					action { //it:State
						println("$name | DTFREE reached")
						 REACHED = true  
						emit("dtfreeReached", "dtfreeReached(REACHED)" ) 
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
}
