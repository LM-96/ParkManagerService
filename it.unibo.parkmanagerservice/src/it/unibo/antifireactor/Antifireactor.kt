/* Generated by AN DISI Unibo */ 
package it.unibo.antifireactor

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Antifireactor ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 var type : String  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("$name | started")
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						println("$name | working")
					}
					 transition(edgeName="t015",targetState="handleCriticalTemp",cond=whenEvent("criticaltemp"))
				}	 
				state("handleCriticalTemp") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("criticaltemp(X)"), Term.createTerm("criticaltemp(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												type = payloadArg(0) 
												if(type.equals("CRITICAL")) {
													//Must send and alert to the manager
								println("$name | thermometer signaled critical temperature")
								forward("fanon", "fanon(ON)" ,"fanactor" ) 
								
												} else if(type.equals("NORMAL")) {
								println("$name | thermothere signaled normal temperature")
								forward("fanoff", "fanoff(OFF)" ,"fanactor" ) 
								
													
												}
						}
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
}
