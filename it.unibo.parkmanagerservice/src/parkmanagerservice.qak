System carparking

/*
 * STATO COAP:
 * - robot -> {"data":"x,y"}
 * - devices -> {"data","value"}
 * - door -> {"door":"indoor/outdoor","state_door":"FREE/OCCUPIED/RESERVED","state_slot":"1","state":"RESERVED","user":"mail"}
 * 
 */

/* Messages for entering car */
Request	enter 		: 	enter(NAME,SURNAME,MAIL)
Reply	slotnum 	: 	slotnum(SLOTNUM) //{"slotnum":"0", "err":"","indoor":"free"} //FREE, OCCUPIED
Request	carenter	:	carenter(SLOTNUM, MAIL)
Reply	token		:	token(TOKEN) //{"token":"XXXXX","err":""}

/* Messages for pickup car */
Request pickup		:	pickup(TOKEN,MAIL)
Reply	canPickup	:	canPickup(X)//{"msg":""}

/* Messages for counters */
Event dtfreeReached : dtfreeReached(X)
Event itoccReached : itoccReached(X)
Dispatch startDtfreeCounter : startDtfreeCounter(X)
Dispatch startItoccCounter : startItoccCounter(X)
Dispatch stopCount : stopCount(X)

/* Messages for device */
Dispatch fanon : fanon(X)
Dispatch fanoff : fanoff(X)
Event criticaltemp : criticaltemp(X)
Event weighton : weighton(X)
Event weightoff : weightoff(X)
Event sonaron : sonaron(X)
Event sonaroff : sonaroff(X)
Dispatch dopolling : dopolling(TIME)
Dispatch stoppolling : stoppolling(X)

/* Messages for notification */
Dispatch notifyuser : notifyuser(NOTIFICATION)

/* Messages to trolley */
Dispatch parkcar : parkcar(SLOTNUM)
Dispatch pickupcar : pickupcar(SLOTNUM)
Dispatch stoptrolley : stoptrolley(X)
Dispatch resumetrolley : resumetrolley(X)

/* Messages for basicrobot */
Dispatch cmd        : cmd(MOVE) 
Request step       : step( TIME )	
Reply   stepdone   : stepdone(V)
Reply   stepfail   : stepfail(DURATION, CAUSE)

/* Message for the antifire */
Dispatch autoantifire : autoantifire(X)
Dispatch manualantifire : manualantifire(X)

/* Main context */
Context ctxcarparking ip[host="localhost" port=8010]

/* Context for devices */
Context ctxthermometer ip[host="127.0.0.1" port=8001]
Context ctxfan ip[host="127.0.0.1" port=8002]
Context ctxsonar ip[host="127.0.0.1" port=8003]
Context ctxweightsensor ip[host="127.0.0.1" port=8004]

/* Context for basicrobot */
Context ctxbasicrobot ip[host="127.0.0.1" port=8020]

/* Actors for devices */
ExternalQActor fanactor context ctxfan
ExternalQActor weightsensoractor context ctxweightsensor
ExternalQActor sonaractor context ctxsonar

/* Actor for basicrobot */
ExternalQActor basicrobot context ctxbasicrobot

QActor parkingmanagerservice context ctxcarparking {
	
	[#  
		it.unibo.parkmanagerservice.persistence.ParkingRepositories.createBasics(6)
		val CONTROLLER = it.unibo.parkmanagerservice.controller.ControllerBuilder.createK(
			it.unibo.parkmanagerservice.persistence.ParkingRepositories.getUserRepository()!!,
			it.unibo.parkmanagerservice.persistence.ParkingRepositories.getParkingSlotRepository()!!,
			it.unibo.parkmanagerservice.persistence.DoorQueues.getIndoorQueue(),
			it.unibo.parkmanagerservice.persistence.DoorQueues.getOutdoorQueue(),
			it.unibo.parkmanagerservice.bean.LocalDoorState.get()).get()
			
		
		
		val DEQUE = it.unibo.parkmanagerservice.notification.CCNotificationDeque
		var JSON : String = ""
        val JSONSTATE = it.unibo.parkmanagerservice.persistence.StateJSONIZER()
		var USERERR : Pair<it.unibo.parkmanagerservice.bean.User?, it.unibo.parkmanagerservice.controller.ParkManagerError?>
		var SLOTERR : Pair<it.unibo.parkmanagerservice.bean.ParkingSlot?, it.unibo.parkmanagerservice.controller.ParkManagerError?>
		var USERSLOT : Pair<it.unibo.parkmanagerservice.bean.User?,it.unibo.parkmanagerservice.bean.ParkingSlot?>
		var USER : it.unibo.parkmanagerservice.bean.User?
		var SLOTNUM : Long = 0
		var INDOOR = it.unibo.parkmanagerservice.bean.DoorType.INDOOR
		var OUTDOOR = it.unibo.parkmanagerservice.bean.DoorType.OUTDOOR
		var NOTIFICATION : it.unibo.parkmanagerservice.notification.Notification
		var SLOT : it.unibo.parkmanagerservice.bean.ParkingSlot?
		val INDOOR_POLLING = it.unibo.parkmanagerservice.bean.Timers.get().INDOOR_POLLING
		val OUTDOOR_POLLING = it.unibo.parkmanagerservice.bean.Timers.get().OUTDOOR_POLLING
		val ITOCC = it.unibo.parkmanagerservice.bean.Timers.get().ITOCC
		val DTFREE = it.unibo.parkmanagerservice.bean.Timers.get().DTFREE
		val ADMIN = it.unibo.parkmanagerservice.bean.User.getAdmin()
	#]
	
	State s0 initial {
		println("$name | started")
	} Goto work
	
	State work {
		println("$name | waiting for request...")
		updateResource [# JSONSTATE.toString() #]
	} Transition t
		whenRequest enter -> handleEnter
		whenRequest carenter -> handleCarEnter
		whenRequest pickup -> handlePickup
		whenEvent weighton -> handleSomeoneInIndoor
		whenEvent weightoff -> handleIndoorReturnFree
		whenEvent sonaron -> handleSomeoneInOutdoor
		whenEvent sonaroff -> handleOutdoorReturnFree
		whenEvent dtfreeReached -> handleDtfreeReached
		whenEvent itoccReached -> handleItoccReached
	
	State handleEnter {
		printCurrentMessage
		[# SLOTNUM = 0 #]
		onMsg (enter : enter(NAME,SURNAME,MAIL)) {
			[#
				try {
					USER = CONTROLLER.createUser(payloadArg(0), payloadArg(1), payloadArg(2))
					SLOTNUM = CONTROLLER.assignSlotToUser(USER!!)
					if(SLOTNUM > 0) {
						
						if(CONTROLLER.reserveDoorForUserOrEnqueue(INDOOR, USER!!)) {
							JSON = "{\"slotnum\":\"$SLOTNUM\",\"indoor\":\"FREE\",\"time\":\"${ITOCC}\"}"
					#]
							updateResource[# JSONSTATE
								.updateDoor(INDOOR).updateSlotReserved(SLOTNUM, USER!!).toString() #]
							forward weightsensoractor -m dopolling : dopolling($INDOOR_POLLING)
							forward itocccounter -m startItoccCounter : startItoccCounter(START)
					[#
						} else JSON = "{\"slotnum\":\"$SLOTNUM\",\"indoor\":\"OCCUPIED\"}"
					}
				} catch(e : java.sql.SQLException) {
					JSON = "{\"err\":\"${e.getLocalizedMessage()}\"}"
				}
			#]
		}
		println("$name | reply with slotnum(${JSON!!})")
		replyTo enter with slotnum : slotnum($JSON)
		
	} Goto work
	
	State handleSomeoneInIndoor {
		forward itocccounter -m stopCount : stopCount(STOP)
		[# 
			USER = CONTROLLER.setSomeoneOnDoor(INDOOR)
		#]
		updateResource[# JSONSTATE.updateDoor(INDOOR).toString() #]
	} Goto work
	
	State handleIndoorReturnFree {
		[# 
			USER = CONTROLLER.setCarOfUserAtIndoorParked()
			NOTIFICATION = `it.unibo.parkmanagerservice`.notification.DefaultNotificationFactory.createForUser(
						USER!!,
						`it.unibo.parkmanagerservice`.notification.NotificationType.TOKEN,
						arrayOf(USER!!.token!!))
			DEQUE.put(NOTIFICATION)
			SLOT =  CONTROLLER.getSlotReservedForUser(USER!!)
		#]
			forward notificationactor -m notifyuser : notifyuser(NOTIFY)
			forward weightsensoractor -m stoppolling : stoppolling(STOP)
			updateResource[# JSONSTATE.updateDoor(INDOOR).updateSlotOccupied(SLOT!!.slotnum).toString() #]
	} Goto enterNext if [# (CONTROLLER.getDoorQueue(INDOOR).remaining()) > 0 #] else work
	
	State enterNext {
		[# 
			USER = CONTROLLER.reserveDoorForNextUser(INDOOR)
			if(USER != null) {	
				NOTIFICATION = `it.unibo.parkmanagerservice`.notification.DefaultNotificationFactory.createForUser(
					USER!!,
					`it.unibo.parkmanagerservice`.notification.NotificationType.SLOTNUM,
					arrayOf(CONTROLLER.getSlotReservedForUser(USER!!)!!.slotnum.toString(), ITOCC.toString()))
				DEQUE.put(NOTIFICATION)
		#]
					forward notificationactor -m notifyuser : notifyuser(NOTIFY)
					forward weightsensoractor -m dopolling : dopolling($INDOOR_POLLING)
					forward itocccounter -m startItoccCounter : startItoccCounter(START)
					updateResource[# JSONSTATE
								.updateDoor(INDOOR).updateSlotReserved(SLOTNUM, USER!!).toString() #]
		[# 	}
		#]
	} Goto work
	
	State handleCarEnter {
		printCurrentMessage
		onMsg(carenter : carenter(SLOTNUM,MAIL)) {
			[# 	SLOTNUM = payloadArg(0).toLong()
				USERERR = CONTROLLER.assignTokenToUserAtIndoor(payloadArg(0), payloadArg(1))
				if(USERERR.first != null && USERERR.second == null) {
					JSON = "{\"token\":\"${USERERR.first!!.token!!.toString()}\"}"
			#]
							forward itocccounter -m stopCount:stopCount(STOP)
							forward trolley -m parkcar : parkcar($SLOTNUM)
							updateResource[# JSONSTATE.updateSlotOccupied(SLOTNUM).toString() #]
			[#
				} else JSON = "{\"err\":\"${USERERR!!.second!!.msg}\"}"
			#]
			
			println("$name | reply to CARENTER with $JSON")
			replyTo carenter with token:token($JSON)
			
		}
	} Goto work
	
	State handlePickup {
		printCurrentMessage
		onMsg(pickup : pickup(TOKEN,MAIL)) {
			[# 	
				SLOTERR = CONTROLLER.analyzeToken(payloadArg(0), payloadArg(1))
				if(SLOTERR.first != null && SLOTERR.second == null) {
					SLOTNUM = SLOTERR.first!!.slotnum
					if(CONTROLLER.reserveDoorForUserOrEnqueue(OUTDOOR, SLOTERR.first!!.user!!)) {
						JSON = "{\"msg\":\"The transport trolley will transport your car to the outdoor: you will get a notification when your car is ready. Plase stay near the ourdoor\"}"
			#]
						updateResource[#JSONSTATE.updateSlotAlmostFree(SLOTERR.first!!.slotnum).toString() #]
						forward trolley -m pickupcar : pickupcar($SLOTNUM)
						forward sonaractor -m dopolling : dopolling($OUTDOOR_POLLING)
						
			[#
					} else
						JSON = "{\"msg\":\"The outdoor is already engaged. When possible, the trolley will transport your car to the outdoor. You will be notified as soon.\"}"
				} else
					JSON = "{\"msg\":\"$SLOTERR.second!!\"}"
			#]
					println("$name | reply with canPickup(${JSON!!})")
					replyTo pickup with canPickup : canPickup($JSON)
		}
	} Goto work
	
	State handleSomeoneInOutdoor {
		[#
			CONTROLLER.setSomeoneOnDoor(OUTDOOR)!!
			USERSLOT = CONTROLLER.freeSlotUsedByUserAtOutdoor()
			USER = USERSLOT.first
			if(USER != null) {
				NOTIFICATION = `it.unibo.parkmanagerservice`.notification.DefaultNotificationFactory.createForUser(
						USER!!,
						`it.unibo.parkmanagerservice`.notification.NotificationType.PICKUP,
						arrayOf<String>((DTFREE / 1000).toString())
					)
				DEQUE.put(NOTIFICATION)
		#]
				forward notificationactor -m notifyuser : notifyuser(NOTIFY)
				forward dtfreecounter -m startDtfreeCounter : startDtfreeCounter($OUTDOOR_POLLING)
				updateResource[# JSONSTATE
								.updateDoor(OUTDOOR).updateSlotFree(USERSLOT.second!!.slotnum).toString() #]
		[# } #]
	} Goto work
	
	State handleOutdoorReturnFree {
		[# CONTROLLER.setFreeDoor(OUTDOOR) #]
		forward sonaractor -m stoppolling : stoppolling(STOP)
		updateResource[# JSONSTATE.updateDoor(OUTDOOR).toString() #]
	} Goto exitNext if [# (CONTROLLER.getDoorQueue(OUTDOOR).remaining()) > 0 #] else work
	
	State exitNext {
		[# 
			USER = CONTROLLER.reserveDoorForNextUser(OUTDOOR)
			if(USER != null) {	
		#]
					forward  sonaractor -m dopolling : dopolling($OUTDOOR_POLLING)
					forward dtfreecounter -m startDtfreeCounter : startDtfreeCounter(START)
					forward trolley -m pickupcar : pickupcar($SLOTNUM)
					updateResource[# JSONSTATE
								.updateDoor(OUTDOOR).updateSlotAlmostFree(SLOTNUM).toString() #]
					
		[# 	}
		#]
	} Goto work
	
	State handleDtfreeReached {
		[# 
			if(ADMIN != null) {
				USER = CONTROLLER.getDoorsManager().getUserAtDoor(OUTDOOR)
				
				if(USER != null) {
					NOTIFICATION = `it.unibo.parkmanagerservice`.notification.DefaultNotificationFactory.createForUser(
						USER!!,
						`it.unibo.parkmanagerservice`.notification.NotificationType.USER_DTFREE_REACHED,
						arrayOf<String>()
					)
					DEQUE.put(NOTIFICATION)
					#] forward notificationactor -m notifyuser : notifyuser(NOTIFY) [#
					NOTIFICATION = `it.unibo.parkmanagerservice`.notification.DefaultNotificationFactory.createForUser(
						USER!!,
						`it.unibo.parkmanagerservice`.notification.NotificationType.ADMIN_DTFREE_REACHED,
						arrayOf<String>()
					)
					NOTIFICATION.destination = ADMIN.mail
					DEQUE.put(NOTIFICATION)
					#] forward notificationactor -m notifyuser : notifyuser(NOTIFY) [#
				}
			}
		#]
	} Goto work
	
	State handleItoccReached {
		[# 
			USER = CONTROLLER.getDoorsManager().getUserAtDoor(OUTDOOR)
			if(USER != null) {
				NOTIFICATION = `it.unibo.parkmanagerservice`.notification.DefaultNotificationFactory.createForUser(
						USER!!,
						`it.unibo.parkmanagerservice`.notification.NotificationType.LOSEN_RIGHT,
						arrayOf<String>()
					)
					DEQUE.put(NOTIFICATION)
					#] forward notificationactor -m notifyuser : notifyuser(NOTIFY) [#
						
					CONTROLLER.setFreeDoor(INDOOR)
					SLOT = CONTROLLER.freeSlotReservedByUser(USER!!)
			}
		#]
		
	} Goto enterNext if [# (CONTROLLER.getDoorQueue(INDOOR).remaining()) > 0 #] else work
}


QActor itocccounter context ctxcarparking {
	
	[# 	
		val ITOCC = it.unibo.parkmanagerservice.bean.Timers.get().ITOCC
		var REACHED = false
		var JSON = "{\"data\":\"INIT\"}"
	#]
	
	State s0 initial {
		println("$name | started")
	} Goto work
	
	State work {
		[# 
			if(REACHED) {
				REACHED = false
				var JSON = "{\"data\":\"REACHED\"}"
			} else { 
				JSON = "{\"data\":\"WORK\"}"
			} #]
		updateResource [# JSON #]
		println("$name | waiting for command")
	} Transition t
		whenMsg startItoccCounter -> count
		whenMsg stopCount -> work
	
	State count {
		println("$name | start ITOCC count...")
		[# JSON = "{\"data\":\"COUNTING\"}" #]
		updateResource[# JSON #]
	} Transition t
		whenTimeVar ITOCC -> reached
		whenMsg startItoccCounter -> count
		whenMsg stopCount -> work
		
	State reached {
		println("$name | ITOCC reached")
		[# REACHED = true #]
		emit itoccReached : itoccReached(REACHED)
	} Goto work
}

QActor dtfreecounter context ctxcarparking {
	[# 	
		val DTFREE = it.unibo.parkmanagerservice.bean.Timers.get().DTFREE
		var REACHED = false
		var JSON = "{\"data\":\"INIT\"}"
	#]
	
	State s0 initial {
		println("$name | started")
	} Goto work
	
	State work {
		[# 
			if(REACHED) {
				REACHED = false
				JSON = "{\"data\":\"REACHED\"}"
		  	} else {
		  		JSON = "{\"data\":\"WORK\"}"
		  	} #]
		updateResource [# JSON #]
		println("$name | waiting for command")
	} Transition t
		whenMsg startDtfreeCounter -> count
		whenMsg stopCount -> work
	
	State count {
		println("$name | start DTFREE count...")
		[# JSON = "{\"data\":\"COUNTING\"}" #]
		updateResource[# JSON #]
	} Transition t
		whenTimeVar DTFREE -> reached
		whenMsg startDtfreeCounter -> count
		whenMsg stopCount -> work
	
	State reached {
		println("$name | DTFREE reached")
		[# REACHED = true #]
		emit dtfreeReached : dtfreeReached(REACHED)
	} Goto work
}

QActor notificationactor context ctxcarparking {
	
	[# 
		val NOTIFIER = it.unibo.parkmanagerservice.notification.SystemNotifier.get()
		val DEQUE = it.unibo.parkmanagerservice.notification.CCNotificationDeque
		var NOTIFICATION : it.unibo.parkmanagerservice.notification.Notification? = null
	#]
	
	State s0 initial {
		println("$name | started")
	} Goto work
	
	State work {
		println("$name | working")
	} Transition t0
		whenMsg notifyuser -> handleNotificationToSend
	
	State handleNotificationToSend {
		[# 
			NOTIFICATION = DEQUE.get()
			if(NOTIFICATION != null) {
				NOTIFIER.sendNotification(NOTIFICATION!!)
				println("$name | Notification sent")
			}
		#]
	} Goto work if [# NOTIFICATION == null #] else handleNotificationToSend
}

QActor antifireactor context ctxcarparking {
	
	[#
		var type = "NORMAL"
		var MODE = it.unibo.parkmanagerservice.bean.AntifireMode.AUTO
		var JSON = "{\"temp\":\"NORMAL\",\"mode\":\"$MODE\"}"
		val ADMIN = it.unibo.parkmanagerservice.bean.User.getAdmin()
		var NOTIFICATION : it.unibo.parkmanagerservice.notification.Notification? = null
		val DEQUE = it.unibo.parkmanagerservice.notification.CCNotificationDeque
	#]
	
	State s0 initial {
		println("$name | started")
	} Goto work
	
	State work {
		println("$name | working")
		[# JSON = "{\"temp\":\"$type\",\"mode\":\"$MODE\"}" #]
		updateResource[# JSON #]
	} Transition t0
		whenEvent criticaltemp -> handleCriticalTemp
		whenMsg autoantifire -> setAuto
		whenMsg manualantifire -> setManual
	
	State handleCriticalTemp {
		onMsg(criticaltemp:criticaltemp(X)) {
			[# 
				type = payloadArg(0)
				if(MODE == `it.unibo.parkmanagerservice`.bean.AntifireMode.AUTO) {
					if(type.equals("CRITICAL")) {
						if(ADMIN != null) {
							NOTIFICATION = `it.unibo.parkmanagerservice`.notification.DefaultNotificationFactory.createForUser(
							ADMIN!!,
							`it.unibo.parkmanagerservice`.notification.NotificationType.ADMIN_TEMP,
							arrayOf<String>(MODE.toString()))
							DEQUE.put(NOTIFICATION!!)
							#] forward notificationactor -m notifyuser : notifyuser(NOTIFY) [#
						}
				#]
						println("$name | thermometer signaled critical temperature")
						forward fanactor -m fanon : fanon(ON)
				[#
					} else if(type.equals("NORMAL")) {
				#]
						println("$name | thermothere signaled normal temperature")
						forward fanactor -m fanoff : fanoff(OFF)
				[#
						
					}
				}
			#]
		}
	} Goto work
	
	State setManual {
		println("$name | Set to manual")
		[# MODE = `it.unibo.parkmanagerservice`.bean.AntifireMode.MANUAL #]
	} Goto work
	
	State setAuto {
		println("$name | Set to auto")
		[# MODE = `it.unibo.parkmanagerservice`.bean.AntifireMode.AUTO #]
	} Goto work
}

QActor trolley context ctxcarparking {
	
	[#
		it.unibo.parkmanagerservice.trolley.MapLoader.loadMapFromTxt("resources/parking_map.txt")
		val PLANNER = itunibo.planner.plannerUtil
		val STEP_TIME = "340"
		val SLOTMAP = it.unibo.parkmanagerservice.trolley.SlotMap
		val DOORMAP = it.unibo.parkmanagerservice.trolley.DoorMap
		val INDOOR = it.unibo.parkmanagerservice.bean.DoorType.INDOOR
		val OUTDOOR = it.unibo.parkmanagerservice.bean.DoorType.OUTDOOR
		val POSTOIN = DOORMAP.getAdiacentAllowedPositionFromDoor(INDOOR)!!
		val POSTOOUT = DOORMAP.getAdiacentAllowedPositionFromDoor(OUTDOOR)!!
		var DEST : Pair<Int, Int>? = null
		val TRIPBUILDER = it.unibo.parkmanagerservice.trolley.CompleteTripBuilder(POSTOIN.first, POSTOIN.second, POSTOOUT.first, POSTOOUT.second)
		var TTRIP : kotlin.collections.Iterator<it.unibo.parkmanagerservice.trolley.TripStage>? = null
		var PLAN : kotlin.collections.Iterator<aima.core.agent.Action>? = null
		var ACTION : aima.core.agent.Action? = null
		var CURRSTAGE : it.unibo.parkmanagerservice.trolley.TripStage? = null
		var CANGO = false
		var STATE = it.unibo.parkmanagerservice.trolley.TrolleyState.IDLE
		var INTERRUPTIBLE = false
		var EXPECTED_DIRECTION : String?
		var JSON = ""
		PLANNER.initAI()
		
		PLANNER.showMap()
	#]
	
	State s0 initial {
		println("$name | started")
	} Goto home
	
	//{"data":"0"}
	
	State home {
		println("$name | work")
		[# 
			if(!(PLANNER.getPosX() == 0 && PLANNER.getPosY() == 0)) {
				PLANNER.setGoal(0, 0)
				PLAN = PLANNER.doPlan()?.iterator()
				if(PLAN != null) {
					while(PLAN!!.hasNext()) PLANNER.doMove(PLAN!!.next().toString())
				}
				while("downDir" != PLANNER.getDirection()) {
						PLANNER.doMove("r")
				}
				
			}
			STATE = `it.unibo.parkmanagerservice.trolley`.TrolleyState.IDLE
			TTRIP = null
			CURRSTAGE = null
			PLAN = null
			PLANNER.showMap()
			JSON = "{\"state\":\"${STATE}\",\"action\":\"${CURRSTAGE?.type}\",\"position\":{\"x\":\"${PLANNER.getPosX()}\",\"y\":\"${PLANNER.getPosY()}\"}}"
		#]
		updateResource[# JSON #]
	} Transition t0
		whenMsg parkcar -> handle
		whenMsg pickupcar -> handle
		whenMsg stoptrolley -> stopped
		
		
	State handle {
		[# 
			STATE = `it.unibo.parkmanagerservice.trolley`.TrolleyState.WORKING
			JSON = "{\"state\":\"${STATE}\",\"action\":\"${CURRSTAGE?.type}\",\"position\":{\"x\":\"${PLANNER.getPosX()}\",\"y\":\"${PLANNER.getPosY()}\"}}"
			TRIPBUILDER.clear()
		#]
			updateResource[# JSON #]
		onMsg (parkcar : parkcar(SLOTNUM)) {
			println("$name | Received request to park the car at the indoor to the slot ${payloadArg(0)}")
			[# 
				DEST = SLOTMAP.getAdiacentAllowedPositionFromSlot(payloadArg(0))
				println("$name | Found slot at coordinates $DEST")
				if(DEST != null) {
					TTRIP = TRIPBUILDER.addParkTrip(DEST!!.first, DEST!!.second).build()
				} else
					println("$name | Unable to find a plan to go to the slot ${payloadArg(0)}")
			#]
		}
		onMsg (pickupcar : pickupcar(SLOTNUM)) {
			println("$name | Received request to pickup the car at the slot ${payloadArg(0)}")
			[# 
				DEST = SLOTMAP.getAdiacentAllowedPositionFromSlot(payloadArg(0))
				println("$name | Found slot at coordinates $DEST")
				if(DEST != null) {	
					TTRIP = TRIPBUILDER.addPickupTrip(DEST!!.first, DEST!!.second).build()
				} else
					println("$name | Unable to find a plan to go to the slot ${payloadArg(0)}")
			#]
		}
	} Goto nextStage if [# DEST != null #] else home
	
	State nextStage {
		[# 
			CANGO = false
			if(TTRIP != null) {
				while(TTRIP!!.hasNext() && !CANGO) {
					CURRSTAGE = TTRIP!!.next()
					println("$name ! CURRSTAGE = ${CURRSTAGE}")
					INTERRUPTIBLE = false
					
					when(CURRSTAGE!!.type) {
						`it.unibo.parkmanagerservice.trolley`.TripStageType.LOAD_CAR -> {
							CANGO = true
						}
						`it.unibo.parkmanagerservice.trolley`.TripStageType.UNLOAD_CAR -> {
							CANGO = true
						}
						else -> {
							PLANNER.setGoal(CURRSTAGE!!.destination.first, CURRSTAGE!!.destination.second)
							PLAN = PLANNER.doPlan()?.iterator()
							if(PLAN != null) {
								CANGO = true
							}
							if(CURRSTAGE!!.type == `it.unibo.parkmanagerservice.trolley`.TripStageType.MOVING_TO_HOME) {
								INTERRUPTIBLE = true
							} else {
								INTERRUPTIBLE = false
							}
						}
					}
				}	
			}
		#]
	} Goto checkStage if [# CANGO #] else home
	State checkStage {
	} Goto elevator if [# CURRSTAGE!!.type ==  `it.unibo.parkmanagerservice.trolley`.TripStageType.LOAD_CAR ||
			CURRSTAGE!!.type ==  `it.unibo.parkmanagerservice.trolley`.TripStageType.UNLOAD_CAR #] else nextAction
	
	State elevator {
		[# 
			EXPECTED_DIRECTION = DOORMAP.getDirection(PLANNER.getPosX(), PLANNER.getPosY()) ?: SLOTMAP.getDirection(PLANNER.getPosX(), PLANNER.getPosY())
			if(EXPECTED_DIRECTION != null) {
				while(EXPECTED_DIRECTION != PLANNER.getDirection()) {
					#] 
						forward basicrobot -m cmd : cmd(r)
						delay 1000
					[#
						PLANNER.doMove("r")
				}
			}
			
			when(CURRSTAGE!!.type) {
				`it.unibo.parkmanagerservice.trolley`.TripStageType.LOAD_CAR -> {
					println("$name | I will load the car")
					PLANNER.showMap()
					PLANNER.resetActions()
					JSON = "{\"state\":\"${STATE}\",\"action\":\"${CURRSTAGE!!.type}\",\"position\":{\"x\":\"${PLANNER.getPosX()}\",\"y\":\"${PLANNER.getPosY()}\"}}"
					#] 
						updateResource[# JSON #]
						delay 3000
					[#
					println("$name | I have loaded the car")
				}
				`it.unibo.parkmanagerservice.trolley`.TripStageType.UNLOAD_CAR -> {
					println("$name | I will unload the car")
					PLANNER.showMap()
					PLANNER.resetActions()
					JSON = "{\"state\":\"${STATE}\",\"action\":\"${CURRSTAGE!!.type}\",\"position\":{\"x\":\"${PLANNER.getPosX()}\",\"y\":\"${PLANNER.getPosY()}\"}}"
					#] 
						updateResource[# JSON #]
						delay 3000
					[#
					println("$name | I have unloaded the car")
				}
				else -> {}
				}
		#]
	} Goto nextStage
	
	State nextAction {
		[# 
			CANGO = false
			if(TTRIP != null) {
				if(PLAN!!.hasNext()) {
					ACTION = PLAN!!.next()
					if(ACTION != null) {
						if(!ACTION!!.isNoOp) {
							CANGO = true
						}
					}
				}
			}
		#]
		
	} Goto doAction if [# CANGO #] else nextStage
	
	State doAction {
		[# 
			CANGO = false
			if(ACTION.toString().equals("w")) {
				#] request basicrobot -m  step : step($STEP_TIME) [#
				CANGO = true
			} else {
				#] 
					forward basicrobot -m cmd : cmd($ACTION)
					delay 500
				[#
					PLANNER!!.doMove(ACTION.toString())
					JSON = "{\"state\":\"${STATE}\",\"action\":\"${CURRSTAGE!!.type}\",\"position\":{\"x\":\"${PLANNER.getPosX()}\",\"y\":\"${PLANNER.getPosY()}\"}}"
				#]	updateResource [# JSON #] [#
			}
		#]
	} Goto waitStepDone if [# CANGO #] else nextAction 
	
	State waitStepDone {
	} Transition t
		whenReply stepdone -> handleStepDone
		whenReply stepfail -> home
		whenMsg stoptrolley -> stopped
		whenMsg parkcar and [# INTERRUPTIBLE #] -> handle
		whenMsg pickupcar and [# INTERRUPTIBLE #] -> handle
	
	State handleStepDone {
		[# 
			JSON = "{\"state\":\"${STATE}\",\"action\":\"${CURRSTAGE!!.type}\",\"position\":{\"x\":\"${PLANNER.getPosX()}\",\"y\":\"${PLANNER.getPosY()}\"}}"
			PLANNER!!.doMove(ACTION.toString())
		#]
		updateResource[# JSON #]
	} Goto nextAction
	
	State stopped {
		onMsg (stepdone : stepdone(V)) {
			[# PLANNER!!.doMove(ACTION.toString()) #]
		}
		[#  
			STATE = `it.unibo.parkmanagerservice.trolley`.TrolleyState.STOPPED 
			JSON = "{\"state\":\"${STATE}\",\"action\":\"${CURRSTAGE?.type}\",\"position\":{\"x\":\"${PLANNER.getPosX()}\",\"y\":\"${PLANNER.getPosY()}\"}}"
		#]
		updateResource[# JSON #]
	} Transition t
		whenMsg resumetrolley -> nextAction
		whenReply stepdone -> stopped
		whenReply stepfail -> home
	
}