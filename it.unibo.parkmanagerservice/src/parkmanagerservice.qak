System carparking

/*
 * Tabelle SQLITE
 * Utente(ID [PK], NAME, SURNAME, MAIL [UNIQUE], STATE, TIME)
 * 	STATE = "Interested", "Parked", "Pickup"
 * ParkingSlot(SLOTNUM [PK], SLOTSTATE, TOKEN, UID [FK])
 * 	SLOTSTATE = "Free", "Reserved", "Occupied"
 * 
 */

/* Messages for entering car */
Request	enter 		: 	enter(NAME,SURNAME,MAIL)
Reply	slotnum 	: 	slotnum(SLOTNUM) //{"slotnum":"0", "err":"","indoor":"free"} //FREE, OCCUPIED
Request	carenter	:	carenter(SLOTNUM, MAIL)
Reply	token		:	token(TOKEN) //{"token":"XXXXX","err":""}

/* Messages for pickup car */
Request pickup		:	pickup(TOKEN,MAIL)
Reply	canPickup	:	canPickup(X)//{"msg":""}

/* Messages for counters */
Dispatch dtfreeReached : dtfreeReached(X)
Dispatch itoccReached : itoccReached(X)
Dispatch startDtfreeCounter : startDtfreeCounter(X)
Dispatch startItoccCounter : startItoccCounter(X)
Dispatch stopCount : stopCount(X)

/* Messages for device */
Dispatch fanon : fanon(X)
Dispatch fanoff : fanoff(X)
Event criticaltemp : criticaltemp(X)
Event weighton : weighton(X)
Event weightoff : weightoff(X)
Event sonaron : sonaron(X)
Event sonaroff : sonaroff(X)
Dispatch dopolling : dopolling(TIME)
Dispatch stoppolling : stoppolling(X)

/* Messages for notification */
Dispatch notifyuser : notifyuser(NOTIFICATION)

/* Messages to trolley */
Dispatch parkcar : parkcar(SLOTNUM)
Dispatch pickup : pickup(SLOTNUM)

/* Main context */
Context ctxcarparking ip[host="localhost" port=8010]

/* Context for devices */
Context ctxthermometer ip[host="192.168.1.100" port=8001]
Context ctxfan ip[host="192.168.1.100" port=8002]
Context ctxsonar ip[host="192.168.1.100" port=8003]
Context ctxweightsensor ip[host="192.168.1.100" port=8004]

/* Actors for devices */
ExternalQActor fanactor context ctxfan
ExternalQActor weightsensoractor context ctxweightsensor

QActor parkingmanagerservice context ctxcarparking {
	
	[#  
		it.unibo.parkmanagerservice.persistence.ParkingRepositories.createBasics(6)
		val CONTROLLER = it.unibo.parkmanagerservice.controller.ControllerBuilder.createK(
			it.unibo.parkmanagerservice.persistence.ParkingRepositories.getUserRepository()!!,
			it.unibo.parkmanagerservice.persistence.ParkingRepositories.getParkingSlotRepository()!!,
			it.unibo.parkmanagerservice.persistence.DoorQueues.getIndoorQueue(),
			it.unibo.parkmanagerservice.persistence.DoorQueues.getOutdoorQueue(),
			it.unibo.parkmanagerservice.bean.LocalDoorState.get()).get()
			
		
		
		val CHANNEL = it.unibo.parkmanagerservice.notification.NotificationChannel.channel
		var JSON : String = ""
		var USERERR : Pair<it.unibo.parkmanagerservice.bean.User?, it.unibo.parkmanagerservice.controller.ParkManagerError?>
		var SLOTERR : Pair<it.unibo.parkmanagerservice.bean.ParkingSlot?, it.unibo.parkmanagerservice.controller.ParkManagerError?>
		var USER : it.unibo.parkmanagerservice.bean.User?
		var SLOTNUM : Long = 0
		var INDOOR = it.unibo.parkmanagerservice.bean.DoorType.INDOOR
		var OUTDOOR = it.unibo.parkmanagerservice.bean.DoorType.OUTDOOR
		var NOTIFICATION : it.unibo.parkmanagerservice.notification.Notification
		var SLOT : it.unibo.parkmanagerservice.bean.ParkingSlot?
	#]
	
	State s0 initial {
		println("$name | started")
	} Goto work
	
	State work {
		println("$name | waiting for request...")
		updateResource [# "work" #]
	} Transition t
		whenRequest enter -> handleEnter
		whenRequest carenter -> handleCarEnter
		whenRequest pickup -> handlePickup
		whenEvent weighton -> handleSomeoneInIndoor
		whenEvent weightoff -> handleIndoorReturnFree
		whenEvent sonaron -> handleSomeoneInOutdoor
		whenEvent sonaroff -> handleOutdoorReturnFree
	
	State handleEnter {
		printCurrentMessage
		[# SLOTNUM = 0 #]
		onMsg (enter : enter(NAME,SURNAME,MAIL)) {
			[#
				USER = CONTROLLER.createUser(payloadArg(0), payloadArg(1), payloadArg(2))
				SLOTNUM = CONTROLLER.assignSlotToUser(USER!!)
				if(SLOTNUM > 0) {
					
					if(CONTROLLER.reserveDoorForUserOrEnqueue(INDOOR, USER!!)) {
						JSON = "{\"slotnum\":\"$SLOTNUM\",\"indoor\":\"FREE\"}"
				#]
						forward weightsensoractor -m dopolling : dopolling(ON)
						forward itocccounter -m startItoccCounter : startItoccCounter(START)
				[#
					} else JSON = "{\"slotnum\":\"$SLOTNUM\",\"indoor\":\"OCCUPIED\"}"
				}
			#]
		}
		replyTo enter with slotnum : slotnum($JSON)
		updateResource[# "slotnum(${JSON!!})" #]
		println("$name | reply with slotnum(${JSON!!})")
		
	} Goto work
	
	State handleSomeoneInIndoor {
		forward itocccounter -m stopCount : stopCount(STOP)
		[# 
			USER = CONTROLLER.setSomeoneOnDoor(INDOOR)!!
			SLOT = CONTROLLER.getSlotReservedForUser(USER!!)
			SLOTNUM = SLOT!!.slotnum
		#]
		forward trolley -m parkcar : parkcar($SLOTNUM)
		updateResource[# "INDOOR=OCCUPIED" #]
	} Goto work
	
	State handleIndoorReturnFree {
		[# 
			USER = CONTROLLER.setCarOfUserAtIndoorParked()
			NOTIFICATION = `it.unibo.parkmanagerservice`.notification.DefaultNotificationFactory.createForUser(
						USER!!,
						`it.unibo.parkmanagerservice`.notification.NotificationType.TOKEN,
						arrayOf(USER!!.token!!))
			CHANNEL.send(NOTIFICATION)
		#]
			forward notificationactor -m notifyuser : notifyuser(NOTIFY)
			forward weightsensoractor -m stoppolling : stoppolling(STOP)
	} Goto enterNext if [# (CONTROLLER.getDoorQueue(INDOOR).remaining()) > 0 #] else work
	
	State enterNext {
		[# 
			USER = CONTROLLER.reserveDoorForNextUser(INDOOR)
			if(USER != null) {	
				NOTIFICATION = `it.unibo.parkmanagerservice`.notification.DefaultNotificationFactory.createForUser(
					USER!!,
					`it.unibo.parkmanagerservice`.notification.NotificationType.SLOTNUM,
					arrayOf(CONTROLLER.getSlotReservedForUser(USER!!)!!.slotnum.toString()))
				CHANNEL.send(NOTIFICATION)
		#]
					forward notificationactor -m notifyuser : notifyuser(NOTIFY)
					forward weightsensoractor -m dopolling : dopolling(ON)
					forward itocccounter -m startItoccCounter : startItoccCounter(START)
					
		[# 	}
		#]
	} Goto work
	
	State handleCarEnter {
		printCurrentMessage
		onMsg(carenter : carenter(SLOTNUM,MAIL)) {
			[# 	
				USERERR = CONTROLLER.assignTokenToUserAtIndoor(payloadArg(0), payloadArg(1))
				if(USERERR.first != null && USERERR.second == null) {
					JSON = "{\"token\":\"${USERERR.first!!.token!!.toString()}\"}"
			#]
							forward itocccounter -m stopCount:stopCount(STOP)
							forward trolley -m parkcar : parkcar($SLOTNUM)
			[#
				} else JSON = "{\"err\":\"$USERERR!!.second.msg\"}"
			#]
			
			println("$name | reply to CARENTER with $JSON")
			replyTo carenter with token:token($JSON)
			updateResource[# "reply to CARENTER with $JSON" #]
			
		}
	} Goto work
	
	State handlePickup {
		printCurrentMessage
		onMsg(pickup : pickup(TOKEN,MAIL)) {
			[# 	
				SLOTERR = CONTROLLER.analyzeToken(payloadArg(0), payloadArg(1))
				if(SLOTERR.first != null && SLOTERR.second == null) {
					SLOTNUM = SLOTERR.first!!.slotnum
					if(CONTROLLER.reserveDoorForUserOrEnqueue(OUTDOOR, SLOTERR.first!!.user!!)) {
						JSON = "{\"msg\":\"The transport trolley will transport your car to the outdoor: you will get a notification when your car is ready. Plase stay near the ourdoor\"}"
			#]
						forward trolley -m pickup : pickup($SLOTNUM)
						forward dtfreecounter -m startDtfreeCounter : startDtfreeCounter(START)
			[#
					} else
						JSON = "{\"msg\":\"The outdoor is already engaged. When possible, the trolley will transport your car to the outdoor. You will be notified as soon.\"}"
				} else
					JSON = "{\"msg\":\"$SLOTERR.second!!\"}"
			#]
					replyTo pickup with canPickup : canPickup($JSON)
					updateResource[# "canPickup($JSON)" #]
		}
	} Goto work
	
	State handleSomeoneInOutdoor {
		[#
			USER = CONTROLLER.freeSlotUsedByUserAtOutdoor()!!
			NOTIFICATION = `it.unibo.parkmanagerservice`.notification.DefaultNotificationFactory.createForUser(
					USER!!,
					`it.unibo.parkmanagerservice`.notification.NotificationType.PICKUP,
					arrayOf<String>()
				)
			CHANNEL.send(NOTIFICATION)
		#]
			forward notificationactor -m notifyuser : notifyuser(NOTIFY)
	}
	
	State handleOutdoorReturnFree {
		[# CONTROLLER.setFreeDoor(OUTDOOR) #]
	}
}


QActor itocccounter context ctxcarparking {
	
	[# 	
		val state : it.unibo.parkingstate.StateReader = it.unibo.parkingstate.MockState
		val ITOCC = 2000L
	#]
	
	State s0 initial {
		println("$name | started")
	} Goto work
	
	State work {
		println("$name | working...")
		updateResource [# "work"#]
	} Transition t
		whenMsg startItoccCounter -> count
		whenMsg stopCount -> work
	
	State count {
		println("$name | start ITOCC count...")
		updateResource [# "count"#]
	} Transition t
		whenTimeVar ITOCC -> reached
		whenMsg startItoccCounter -> count
		whenMsg stopCount -> work
		
	State reached {
		[# if(state.getWeightFromSensor() <= 0) {#]
			//forward parkingservicegui -m itoccReached : itoccReached(REACHED)
			//TODO: how to notify to the client
			updateResource [# "ITOCC"#]
			println("$name | ITOCC reached and indoor is free... Client should be notified")
		[# } #]
	} Goto work
}

QActor dtfreecounter context ctxcarparking {
	[# 	
		val state : it.unibo.parkingstate.StateReader = it.unibo.parkingstate.MockState
		val DTFREE = 2000L
	#]
	
	State s0 initial {
		println("$name | started")
	} Goto work
	
	State work {
		println("$name | working...")
		updateResource[# "work" #]
	} Transition t
		whenMsg startDtfreeCounter -> count
		whenMsg stopCount -> work
	
	State count {
		println("$name | start DTFREE count...")
		updateResource[# "count" #]
	} Transition t
		whenTimeVar DTFREE -> reached
		whenMsg startDtfreeCounter -> count
		whenMsg stopCount -> work
	
	State reached {
		[# if(state.getDistanceFromSonar() >= 0) {#]
			//forward parkingservicestatusgui -m dtfreeReached : dtfreeReached(REACHED)
			updateResource [# "DTFREE"#]
			println("$name | DTFREE reached and outdoor is occupied... Manager has been notified")
		[# } #]
	} Goto work
}

QActor parkingservicestatusgui context ctxcarparking {
	State s0 initial {
		println("$name | started")
	} Goto work
	
	State work {
		println("$name | working")
	} Transition t
		whenMsg dtfreeReached -> receivedDtfreeAlarm
	
	State receivedDtfreeAlarm {
		println("$name | the manager has been notified for DTFREE reached")
	} Goto work
}

QActor notificationactor context ctxcarparking {
	
	[# 
		val NOTIFIER = it.unibo.parkmanagerservice.notification.SystemNotifier.get()
		val CHANNEL = it.unibo.parkmanagerservice.notification.NotificationChannel.channel		
	#]
	
	State s0 initial {
		println("$name | started")
	}
	
	State work {
		println("$name | working")
	} Transition t0
		whenMsg notifyuser -> handleNotificationToSend
	
	State handleNotificationToSend {
		[# 
			NOTIFIER.sendNotification(CHANNEL.receive())
		#]
	} Goto work if [# CHANNEL.isEmpty #] else handleNotificationToSend
}

QActor antifireactor context ctxcarparking {
	
	[# var type : String #]
	
	State s0 initial {
		println("$name | started")
	} Goto work
	
	State work {
		println("$name | working")
	} Transition t0
		whenEvent criticaltemp -> handleCriticalTemp
	
	State handleCriticalTemp {
		onMsg(criticaltemp:criticaltemp(X)) {
			[# 
				type = payloadArg(0) 
				if(type.equals("CRITICAL")) {
					//Must send and alert to the manager
			#]
					println("$name | thermometer signaled critical temperature")
					forward fanactor -m fanon : fanon(ON)
			[#
				} else if(type.equals("NORMAL")) {
			#]
					println("$name | thermothere signaled normal temperature")
					forward fanactor -m fanoff : fanoff(OFF)
			[#
					
				}
			#]
		}
	} Goto work
}

QActor trolley context ctxcarparking {
	State s0 initial {
		println("$name | started")
	} Goto work
	
	State work {
		println("$name | work")
	} Transition t0
		whenMsg parkcar -> handlePark
		whenMsg pickup -> handlePickup
		
	State handlePark {
		
	} Goto work
	
	State handlePickup {
		
	} Goto work
}