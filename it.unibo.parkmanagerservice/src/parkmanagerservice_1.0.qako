System carparking

Request	enter 		: 	enter(X)
Reply	slotnum 	: 	slotnum(SLOTNUM)

Request	carenter	:	carenter(SLOTNUM)
Reply	token		:	token(TOKEN)

Request pickup		:	pickup(TOKEN)
Reply	canPickup	:	canPickup(X)

Context ctxcarparking ip[host="localhost" port=8000]

QActor parkingservicegui context ctxcarparking {
	
	[# 	var RECEIVED_SLOTNUM = 0
		var MY_TOKEN = 0
	#]
	
	State s0 initial {
		println("$name | started")
	} Goto requestToEnter
	
	State requestToEnter {
		request parkingmanagerservice -m enter : enter(hello)
		println("$name | sended request to enter")
	} Transition t
		whenReply slotnum -> receivedSlotnum
	
	State receivedSlotnum {
		printCurrentMessage
		onMsg (slotnum : slotnum(SLOTNUM)) {
			[# RECEIVED_SLOTNUM = payloadArg(0).toInt() #]
			println("$name | received reply with SLOTNUM=$RECEIVED_SLOTNUM")
		}
	} Goto moveTheCar if [# RECEIVED_SLOTNUM > 0 #] else noAvailableSlot
	
	State moveTheCar {
		delay 2000
		println("$name | client has moved the car in the INDOOR")
		request parkingmanagerservice -m carenter : carenter($RECEIVED_SLOTNUM)
		println("$name | client has press CARENTER")
	} Transition t
		whenReply token -> receivedToken
	
	State receivedToken {
		printCurrentMessage
		onMsg (token : token(TOKEN)) {
			[# MY_TOKEN = payloadArg(0).toInt() #]
			println("$name | received reply with TOKEN=$MY_TOKEN")
		}
	} Goto requestToPickUp
	
	State requestToPickUp {
		delay 5000
		request parkingmanagerservice -m pickup : pickup($MY_TOKEN)
		println("$name | client has required to pickup the car")
	} Transition t
		whenReply canPickup -> waitPickupConfirm
	
	State waitPickupConfirm {
		printCurrentMessage
		println("$name | client is going to pick up his car")
	} Goto pickup
	
	State pickup{
		delay 5000
		println("$name | client has picked up his car")
	}
	
	State noAvailableSlot {
		println("$name | no slot available... i go elsewhere or retry later")
	}
}

QActor parkingmanagerservice context ctxcarparking {
	
	[#  val SLOT_MANAGER = it.unibo.parkingslot.SimpleParkingSlotManager(1)
		var indoorFree = true
		var outdorFree = true #]
	
	State s0 initial {
		println("$name | started")
	} Goto work
	
	State work {
		println("$name | waiting for request...")
	} Transition t
		whenRequest enter -> handleEnter
		whenRequest carenter -> handleCarEnter
		whenRequest pickup -> handlePickup
	
	State handleEnter {
		printCurrentMessage
		[# var SLOTNUM = SLOT_MANAGER.getFreeSlot() #]
		println("$name | replying enter request win [SLOTNUM = $SLOTNUM]")
		replyTo enter with slotnum : slotnum($SLOTNUM)
	} Goto work
	
	State handleCarEnter {
		printCurrentMessage
		onMsg(carenter : carenter(SLOTNUM)) {
			[#  var TOKEN = payloadArg(0).toInt()
				SLOT_MANAGER.occupySlot(TOKEN)	#]
			println("$name | generated TOKEN=$TOKEN")
			replyTo carenter with token:token($TOKEN)
			println("$name | trolley will take the car")
		}
	} Goto work
	
	State handlePickup {
		printCurrentMessage
		onMsg(pickup : pickup(TOKEN)) {
			[# 	var TOKEN = payloadArg(0) 
				var slotnum_free = SLOT_MANAGER.freeSlotByToken(TOKEN) #]
			println("$name | trolley will transport car in the outdoor")
			replyTo pickup with canPickup : canPickup(OK)
			println("$name | slot $slotnum_free is going to be free")
		}
	} Goto work
}