System carparking

Request	enter 		: 	enter(X)
Reply	slotnum 	: 	slotnum(SLOTNUM)

Dispatch canEnterCar : canEnterCar(X)

Request	carenter	:	carenter(SLOTNUM)
Reply	token		:	token(TOKEN)

Request pickup		:	pickup(TOKEN)
Reply	canPickup	:	canPickup(X)

Dispatch dtfreeReached : dtfreeReached(X)
Dispatch itoccReached : itoccReached(X)
Dispatch startDtfreeCounter : startDtfreeCounter(X)
Dispatch startItoccCounter : startItoccCounter(X)
Dispatch stopCount : stopCount(X)

/* Messages for notification */
Dispatch notifyuser : notifyuser(NOTIFICATION)


Context ctxcarparking ip[host="localhost" port=8000]
 /*
QActor parkingservicegui context ctxcarparking {
	
	[# 	var RECEIVED_SLOTNUM = 0
		var MY_TOKEN = 0
		val state = it.unibo.parkingstate.MockState
	#]
	
	State s0 initial {
		println("$name | started")
	} Goto requestToEnter
	
	
	State requestToEnter {
		request parkingmanagerservice -m enter : enter(hello)
		println("$name | sended request to enter")
	} Transition t
		whenReply slotnum -> receivedSlotnum
	
	State receivedSlotnum {
		printCurrentMessage
		onMsg (slotnum : slotnum(SLOTNUM)) {
			[# RECEIVED_SLOTNUM = payloadArg(0).toInt() #]
			println("$name | received reply with SLOTNUM=$RECEIVED_SLOTNUM")
		}
	} Goto waitMoveToIndoor if [# RECEIVED_SLOTNUM > 0 #] else noAvailableSlot
	
	State waitMoveToIndoor {
		println("$name | client is waiting the idoor is free")
	} Transition t
		whenMsg canEnterCar -> moveTheCar
	
	State moveTheCar {
		
		//Simulate client is entering the car into the indoor
		delay 5000
		[# state.setIndoorState(`it.unibo.parkingstate`.DoorState.OCCUPIED) #]
		println("$name | client has moved the car in the INDOOR")
		
		request parkingmanagerservice -m carenter : carenter($RECEIVED_SLOTNUM)
		println("$name | client has press CARENTER")
	} Transition t
		whenReply token -> receivedToken
	
	State receivedToken {
		printCurrentMessage
		onMsg (token : token(TOKEN)) {
			[# MY_TOKEN = payloadArg(0).toInt() #]
			println("$name | received reply with TOKEN=$MY_TOKEN")
		}
	} Goto requestToPickUp
	
	State requestToPickUp {
		delay 5000
		request parkingmanagerservice -m pickup : pickup($MY_TOKEN)
		println("$name | client has required to pickup the car")
	} Transition t
		whenReply canPickup -> waitPickupConfirm
	
	State waitPickupConfirm {
		printCurrentMessage
		println("$name | client is going to pick up his car")
	} Goto pickup
	
	State pickup{
		
		//Simulate client have pick up his car from the outdoor-area
		delay 5000
		[# state.setOutdoorState(`it.unibo.parkingstate`.DoorState.FREE) #]
		
		println("$name | client has picked up his car")
	}
	
	State noAvailableSlot {
		println("$name | no slot available... i go elsewhere or retry later")
	}
} */

QActor parkingmanagerservice context ctxcarparking {
	
	[#  
		val state = it.unibo.parkingstate.MockState
		var SLOTNUM = 0
	#]
	
	State s0 initial {
		println("$name | started")
	} Goto work
	
	State work {
		println("$name | waiting for request...")
		updateResource [# "work" #]
	} Transition t
		whenRequest enter -> handleEnter
		whenRequest carenter -> handleCarEnter
		whenRequest pickup -> handlePickup
	
	State handleEnter {
		printCurrentMessage
		[# SLOTNUM = state.getParkingSlotManager().getFreeSlot() #]
		println("$name | replying enter request with [SLOTNUM = $SLOTNUM]")
		replyTo enter with slotnum : slotnum($SLOTNUM)
		
		updateResource[# "reply with SLOTNUM=$SLOTNUM" #]
		
	} Goto checkIndoorFree if [# SLOTNUM > 0 #] else work
	
	State checkIndoorFree {
		[# if(state.getIndoorState().equals(`it.unibo.parkingstate`.DoorState.FREE)) { 
			state.setIndoorState(`it.unibo.parkingstate`.DoorState.OCCUPIED) #]
			//forward parkingservicegui -m canEnterCar : canEnterCar(OK)
			updateResource [# "canEnterCar(OK)" #]
			forward itocccounter -m startItoccCounter : startItoccCounter(START)
			
		[# } else { #]
			println("$name | indoor-Area is already engaged")
			updateResource [# "canEnterCar(WAIT)" #]
			//TODO: if indoor area is already engaged...
		[# } #]
	} Goto work
	
	State handleCarEnter {
		printCurrentMessage
		onMsg(carenter : carenter(SLOTNUM)) {
			[# 	if(state.getWeightFromSensor() <= 0) { 
			#]
				println("$name | client has not moved the car into the indoor")
				//TODO: see NotifyInterest alternative scenario
				
			[# } else {
				var TOKEN = payloadArg(0).toInt()
				state.getParkingSlotManager().occupySlot(TOKEN)	#]
			forward itocccounter -m stopCount:stopCount(STOP)
			println("$name | generated TOKEN=$TOKEN")
			replyTo carenter with token:token($TOKEN)
			updateResource[# "reply with TOKEN=$TOKEN" #]
			
			//Simulate trolley has take the car
			println("$name | trolley will take the car")
			
			[# 	state.setIndoorState(`it.unibo.parkingstate`.DoorState.FREE) } 
				state.setWeightOnSensor(0.0)
			#]
		}
	} Goto work
	
	State handlePickup {
		printCurrentMessage
		onMsg(pickup : pickup(TOKEN)) {
			[# 	var TOKEN = payloadArg(0) 
				var slotnum_free = state.getParkingSlotManager().freeSlotByToken(TOKEN) 
				 if(slotnum_free == -1) {
			#]
									
					replyTo pickup with canPickup : canPickup(INVALIDTOK)
					updateResource[# "canPickup(INVALIDTOK)"#]
					//TODO: handle invalid token
					
			[# 	} else {
					if(state.getOutdoorState().equals(`it.unibo.parkingstate`.DoorState.FREE)) { 
					state.setOutdoorState(`it.unibo.parkingstate`.DoorState.OCCUPIED)
			#]
					println("$name | trolley will transport car in the outdoor")
					replyTo pickup with canPickup : canPickup(OK)
					println("$name | slot $slotnum_free is going to be free")
					forward dtfreecounter -m startDtfreeCounter : startDtfreeCounter(START)
					
					updateResource[# "canPickup(OK)" #]
				
			[# 		} else { #]
					println("$name | the outdoor is already engaged by another car... please wait")
					replyTo pickup with canPickup : canPickup(WAIT)
					updateResource[# "canPickup(WAIT)"#]
					//TODO: if outdoor area is already engaged?
				
			[# 		}
				}				
			#]
		}
	} Goto work
}


QActor itocccounter context ctxcarparking {
	
	[# 	
		val state : it.unibo.parkingstate.StateReader = it.unibo.parkingstate.MockState
		val ITOCC = 2000L
	#]
	
	State s0 initial {
		println("$name | started")
	} Goto work
	
	State work {
		println("$name | working...")
		updateResource [# "work"#]
	} Transition t
		whenMsg startItoccCounter -> count
		whenMsg stopCount -> work
	
	State count {
		println("$name | start ITOCC count...")
		updateResource [# "count"#]
	} Transition t
		whenTimeVar ITOCC -> reached
		whenMsg startItoccCounter -> count
		whenMsg stopCount -> work
		
	State reached {
		[# if(state.getWeightFromSensor() <= 0) {#]
			//forward parkingservicegui -m itoccReached : itoccReached(REACHED)
			//TODO: how to notify to the client
			updateResource [# "ITOCC"#]
			println("$name | ITOCC reached and indoor is free... Client should be notified")
		[# } #]
	} Goto work
}

QActor dtfreecounter context ctxcarparking {
	[# 	
		val state : it.unibo.parkingstate.StateReader = it.unibo.parkingstate.MockState
		val DTFREE = 2000L
	#]
	
	State s0 initial {
		println("$name | started")
	} Goto work
	
	State work {
		println("$name | working...")
		updateResource[# "work" #]
	} Transition t
		whenMsg startDtfreeCounter -> count
		whenMsg stopCount -> work
	
	State count {
		println("$name | start DTFREE count...")
		updateResource[# "count" #]
	} Transition t
		whenTimeVar DTFREE -> reached
		whenMsg startDtfreeCounter -> count
		whenMsg stopCount -> work
	
	State reached {
		[# if(state.getDistanceFromSonar() >= 0) {#]
			//forward parkingservicestatusgui -m dtfreeReached : dtfreeReached(REACHED)
			updateResource [# "DTFREE"#]
			println("$name | DTFREE reached and outdoor is occupied... Manager has been notified")
		[# } #]
	} Goto work
}

QActor parkingservicestatusgui context ctxcarparking {
	State s0 initial {
		println("$name | started")
	} Goto work
	
	State work {
		println("$name | working")
	} Transition t
		whenMsg dtfreeReached -> receivedDtfreeAlarm
	
	State receivedDtfreeAlarm {
		println("$name | the manager has been notified for DTFREE reached")
	} Goto work
}

QActor notificationactor context ctxcarparking {
	
	[# 
		val NOTIFIER = it.unibo.parkmanagerservice.notification.MailNotifier()
		val CHANNEL = it.unibo.parkmanagerservice.notification.NotificationChannel.channel		
	#]
	
	State s0 initial {
		println("$name | started")
	}
	
	State work {
		println("$name | working")
	} Transition t0
		whenMsg notifyuser -> handleNotificationToSend
	
	State handleNotificationToSend {
		[# 
			NOTIFIER.sendNotification(CHANNEL.receive())
		#]
	} Goto work if [# CHANNEL.isEmpty #] else handleNotificationToSend
}

QActor trolley context ctxcarparking {
	
	[#
		it.unibo.parkmanagerservice.trolley.MapLoader.loadMapFromTxt("resources/parking_map.txt")
		val PLANNER = itunibo.planner.plannerUtil
		val STEP_TIME = "340"
		val SLOTMAP = it.unibo.parkmanagerservice.trolley.SlotMap
		val DOORMAP = it.unibo.parkmanagerservice.trolley.DoorMap
		val INDOOR = it.unibo.parkmanagerservice.bean.DoorType.INDOOR
		val OUTDOOR = it.unibo.parkmanagerservice.bean.DoorType.OUTDOOR
		val POSTOIN = DOORMAP.getAdiacentAllowedPositionFromDoor(INDOOR)!!
		val POSTOOUT = DOORMAP.getAdiacentAllowedPositionFromDoor(OUTDOOR)!!
		var DEST : Pair<Int, Int>? = null
		val TRIPBUILDER = it.unibo.parkmanagerservice.trolley.CompleteTripBuilder(POSTOIN.first, POSTOIN.second, POSTOOUT.first, POSTOOUT.second)
		var TTRIP : kotlin.collections.Iterator<it.unibo.parkmanagerservice.trolley.TripStage>? = null
		var PLAN : kotlin.collections.Iterator<aima.core.agent.Action>? = null
		var ACTION : aima.core.agent.Action? = null
		var CURRSTAGE : it.unibo.parkmanagerservice.trolley.TripStage? = null
		var CANGO = false
		var STATE = it.unibo.parkmanagerservice.trolley.TrolleyState.IDLE
		var INTERRUPTIBLE = false
		var EXPECTED_DIRECTION : String?
		var JSON = ""
		PLANNER.initAI()
		
		PLANNER.showMap()
	#]
	
	State s0 initial {
		println("$name | started")
	} Goto home
	
	//{"data":"0"}
	
	State home {
		println("$name | work")
		[# 
			STATE = `it.unibo.parkmanagerservice.trolley`.TrolleyState.IDLE
			TTRIP = null
			CURRSTAGE = null
			PLAN = null
			PLANNER.showMap()
			JSON = "{\"state\":\"${STATE}\",\"action\":\"${CURRSTAGE?.type}\",\"position\":{\"x\":\"${PLANNER.getPosX()}\",\"y\":\"${PLANNER.getPosY()}\"}}"
		#]
		updateResource[# JSON #]
	} Transition t0
		whenMsg parkcar -> handle
		whenMsg pickupcar -> handle
		whenMsg stoptrolley -> stopped
		
		
	State handle {
		[# 
			STATE = `it.unibo.parkmanagerservice.trolley`.TrolleyState.WORKING
			JSON = "{\"state\":\"${STATE}\",\"action\":\"${CURRSTAGE?.type}\",\"position\":{\"x\":\"${PLANNER.getPosX()}\",\"y\":\"${PLANNER.getPosY()}\"}}"
			TRIPBUILDER.clear()
		#]
			updateResource[# JSON #]
		onMsg (parkcar : parkcar(SLOTNUM)) {
			println("$name | Received request to park the car at the indoor to the slot ${payloadArg(0)}")
			[# 
				DEST = SLOTMAP.getAdiacentAllowedPositionFromSlot(payloadArg(0))
				println("$name | Found slot at coordinates $DEST")
				if(DEST != null) {
					TTRIP = TRIPBUILDER.addParkTrip(DEST!!.first, DEST!!.second).build()
				} else
					println("$name | Unable to find a plan to go to the slot ${payloadArg(0)}")
			#]
		}
		onMsg (pickupcar : pickupcar(SLOTNUM)) {
			println("$name | Received request to pickup the car at the slot ${payloadArg(0)}")
			[# 
				DEST = SLOTMAP.getAdiacentAllowedPositionFromSlot(payloadArg(0))
				println("$name | Found slot at coordinates $DEST")
				if(DEST != null) {	
					TTRIP = TRIPBUILDER.addPickupTrip(DEST!!.first, DEST!!.second).build()
				} else
					println("$name | Unable to find a plan to go to the slot ${payloadArg(0)}")
			#]
		}
	} Goto nextStage if [# DEST != null #] else home
	
	State nextStage {
		[# 
			CANGO = false
			if(TTRIP != null) {
				while(TTRIP!!.hasNext() && !CANGO) {
					CURRSTAGE = TTRIP!!.next()
					println("$name ! CURRSTAGE = ${CURRSTAGE}")
					INTERRUPTIBLE = false
					
					when(CURRSTAGE!!.type) {
						`it.unibo.parkmanagerservice.trolley`.TripStageType.LOAD_CAR -> {
							CANGO = true
						}
						`it.unibo.parkmanagerservice.trolley`.TripStageType.UNLOAD_CAR -> {
							CANGO = true
						}
						else -> {
							PLANNER.setGoal(CURRSTAGE!!.destination.first, CURRSTAGE!!.destination.second)
							PLAN = PLANNER.doPlan()?.iterator()
							if(PLAN != null) {
								CANGO = true
							}
							if(CURRSTAGE!!.type == `it.unibo.parkmanagerservice.trolley`.TripStageType.MOVING_TO_HOME) {
								INTERRUPTIBLE = true
							} else {
								INTERRUPTIBLE = false
							}
						}
					}
				}	
			}
		#]
	} Goto checkStage if [# CANGO #] else home
	State checkStage {
	} Goto elevator if [# CURRSTAGE!!.type ==  `it.unibo.parkmanagerservice.trolley`.TripStageType.LOAD_CAR ||
			CURRSTAGE!!.type ==  `it.unibo.parkmanagerservice.trolley`.TripStageType.UNLOAD_CAR #] else nextAction
	
	State elevator {
		[# 
			EXPECTED_DIRECTION = DOORMAP.getDirection(PLANNER.getPosX(), PLANNER.getPosY()) ?: SLOTMAP.getDirection(PLANNER.getPosX(), PLANNER.getPosY())
			if(EXPECTED_DIRECTION != null) {
				while(EXPECTED_DIRECTION != PLANNER.getDirection()) {
					#] 
						forward basicrobot -m cmd : cmd(l)
						delay 500
					[#
						PLANNER.doMove("l")
				}
			}
			
			when(CURRSTAGE!!.type) {
				`it.unibo.parkmanagerservice.trolley`.TripStageType.LOAD_CAR -> {
					println("$name | I will load the car")
					PLANNER.showMap()
					PLANNER.resetActions()
					JSON = "{\"state\":\"${STATE}\",\"action\":\"${CURRSTAGE!!.type}\",\"position\":{\"x\":\"${PLANNER.getPosX()}\",\"y\":\"${PLANNER.getPosY()}\"}}"
					#] 
						updateResource[# JSON #]
						delay 3000
					[#
					println("$name | I have loaded the car")
				}
				`it.unibo.parkmanagerservice.trolley`.TripStageType.UNLOAD_CAR -> {
					println("$name | I will unload the car")
					PLANNER.showMap()
					PLANNER.resetActions()
					JSON = "{\"state\":\"${STATE}\",\"action\":\"${CURRSTAGE!!.type}\",\"position\":{\"x\":\"${PLANNER.getPosX()}\",\"y\":\"${PLANNER.getPosY()}\"}}"
					#] 
						updateResource[# JSON #]
						delay 3000
					[#
					println("$name | I have unloaded the car")
				}
				else -> {}
				}
		#]
	} Goto nextStage
	
	State nextAction {
		[# 
			CANGO = false
			if(TTRIP != null) {
				if(PLAN!!.hasNext()) {
					ACTION = PLAN!!.next()
					if(ACTION != null) {
						if(!ACTION!!.isNoOp) {
							CANGO = true
						}
					}
				}
			}
		#]
		
	} Goto doAction if [# CANGO #] else nextStage
	
	State doAction {
		[# 
			CANGO = false
			if(ACTION.toString().equals("w")) {
				#] request basicrobot -m  step : step($STEP_TIME) [#
				CANGO = true
			} else {
				#] 
					forward basicrobot -m cmd : cmd($ACTION)
					delay 500
				[#
					PLANNER!!.doMove(ACTION.toString())
					JSON = "{\"state\":\"${STATE}\",\"action\":\"${CURRSTAGE!!.type}\",\"position\":{\"x\":\"${PLANNER.getPosX()}\",\"y\":\"${PLANNER.getPosY()}\"}}"
				#]	updateResource [# JSON #] [#
			}
		#]
	} Goto waitStepDone if [# CANGO #] else nextAction 
	
	State waitStepDone {
	} Transition t
		whenReply stepdone -> handleStepDone
		whenMsg stoptrolley -> stopped
		whenMsg parkcar and [# INTERRUPTIBLE #] -> handle
		whenMsg pickupcar and [# INTERRUPTIBLE #] -> handle
	
	State handleStepDone {
		[# 
			JSON = "{\"state\":\"${STATE}\",\"action\":\"${CURRSTAGE!!.type}\",\"position\":{\"x\":\"${PLANNER.getPosX()}\",\"y\":\"${PLANNER.getPosY()}\"}}"
		#]
		updateResource[# JSON #]
	} Goto nextAction
	
	State stopped {
		onMsg (stepdone : stepdone(V)) {
			[# PLANNER!!.doMove(ACTION.toString()) #]
		}
		[#  
			STATE = `it.unibo.parkmanagerservice.trolley`.TrolleyState.STOPPED 
			JSON = "{\"state\":\"${STATE}\",\"action\":\"${CURRSTAGE?.type}\",\"position\":{\"x\":\"${PLANNER.getPosX()}\",\"y\":\"${PLANNER.getPosY()}\"}}"
		#]
		updateResource[# JSON #]
	} Transition t
		whenMsg resumetrolley -> nextAction
		whenReply stepdone -> stopped
	
}