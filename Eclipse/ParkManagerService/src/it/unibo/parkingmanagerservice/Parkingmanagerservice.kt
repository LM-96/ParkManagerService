/* Generated by AN DISI Unibo */ 
package it.unibo.parkingmanagerservice

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Parkingmanagerservice ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		  val SLOT_MANAGER = it.unibo.parkingslot.SimpleParkingSlotManager(1)
				val state = it.unibo.parkingstate.MockState  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("$name | started")
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						println("$name | waiting for request...")
					}
					 transition(edgeName="t4",targetState="handleEnter",cond=whenRequest("enter"))
					transition(edgeName="t5",targetState="handleCarEnter",cond=whenRequest("carenter"))
					transition(edgeName="t6",targetState="handlePickup",cond=whenRequest("pickup"))
				}	 
				state("handleEnter") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						 var SLOTNUM = SLOT_MANAGER.getFreeSlot()  
						println("$name | replying enter request win [SLOTNUM = $SLOTNUM]")
						answer("enter", "slotnum", "slotnum($SLOTNUM)"   )  
					}
					 transition( edgeName="goto",targetState="checkIndoorFree", cond=doswitch() )
				}	 
				state("checkIndoorFree") { //this:State
					action { //it:State
						 if(state.getIndoorState().equals(`it.unibo.parkingstate`.DoorState.FREE)) {  
						forward("canEnterCar", "canEnterCar(OK)" ,"parkingservicegui" ) 
						forward("startItoccCounter", "startItoccCounter(START)" ,"itocccounter" ) 
						 } else {  
						println("$name | indoor-Area is already engaged")
						 }  
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("handleCarEnter") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("carenter(SLOTNUM)"), Term.createTerm("carenter(SLOTNUM)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 	if(state.getIndoorState().equals(`it.unibo.parkingstate`.DoorState.FREE)) { 
								println("$name | client has not moved the car into the indoor")
								 } else {
												var TOKEN = payloadArg(0).toInt()
												SLOT_MANAGER.occupySlot(TOKEN)	 
								println("$name | generated TOKEN=$TOKEN")
								answer("carenter", "token", "token($TOKEN)"   )  
								println("$name | trolley will take the car")
								 	state.setIndoorState(`it.unibo.parkingstate`.DoorState.FREE) }  
						}
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("handlePickup") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("pickup(TOKEN)"), Term.createTerm("pickup(TOKEN)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 	var TOKEN = payloadArg(0) 
												var slotnum_free = SLOT_MANAGER.freeSlotByToken(TOKEN)  
								 	if(state.getOutdoorState().equals(`it.unibo.parkingstate`.DoorState.FREE)) { 
												state.setOutdoorState(`it.unibo.parkingstate`.DoorState.OCCUPIED)
								println("$name | trolley will transport car in the outdoor")
								answer("pickup", "canPickup", "canPickup(OK)"   )  
								println("$name | slot $slotnum_free is going to be free")
								forward("startDtfreeCounter", "startDtfreeCounter(START)" ,"dtfreecounter" ) 
								 } else {  
								println("$name | the outdoor is already engaged by another car... please wait")
								 }  
						}
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
}
