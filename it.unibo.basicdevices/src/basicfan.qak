System basicdevice

Dispatch fanon : fanon(X)
Dispatch fanoff : fanoff(X)
Dispatch updatefanstate : updatefanstate(X)

Context ctxfan ip[host="localhost" port=8002]

QActor fanactor context ctxfan {
	
	[# 
		val fan = it.unibo.basicdevices.DeviceManager.requestDevice("fan")
		lateinit var state : it.unibo.basicfan.FanState
		
		if(fan == null) {
			println("$name | unable to use the fan")
			System.exit(-1)
		}
		
		fan as it.unibo.basicfan.Fan
	#]
	
	State s0 initial {
		println("$name | started")
		[# state = fan.getState() #]
	} Goto work
	
	State work {
		updateResource[# state.toString() #]
		println("$name | fan state : ${state.toString()}")
	} Transition t0
		whenMsg fanon -> poweron
		whenMsg fanoff -> poweroff
		whenMsg  updatefanstate -> work
	
	State poweron {
		[# 	fan.powerOn() 
			state = `it.unibo.basicfan`.FanState.ON
		#]
	} Goto work
	
	State poweroff {
		[# 	fan.powerOff()
			state = `it.unibo.basicfan`.FanState.OFF
		#]
	} Goto work
	
}