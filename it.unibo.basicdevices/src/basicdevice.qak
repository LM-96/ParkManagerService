System basicdevices

//MESSAGES DEFINITION ****************************************************/
//-Thermometer
Dispatch updatethermometerstate : updatethermometerstate(X)
//-Fan
Dispatch fanon : fanon(X)
Dispatch fanoff : fanoff(X)
Dispatch updatefanstate : updatefanstate(X)
//Sonar
Dispatch updatesonarstate : updatesonarstate(X)
//WeightSensor
Dispatch updatesensorstate : updatesensorstate(X)

//CONTEXTS ***************************************************************/
Context ctxthermometer ip[host="localhost" port=8001]
Context ctxfan ip[host="localhost" port=8002]
Context ctxsonar ip[host="localhost" port=8003]
Context ctxweightsensor ip[host="localhost" port=8004]

QActor thermometeractor context ctxthermometer {
	
	//Aggiungere lancio evento quando raggiunta temperatura
	
	[# 	val thermometer = it.unibo.basicdevices.DeviceManager.requestDevice("thermometer")
		
		if(thermometer == null) {
			println("$name | unable to use the thermometer")
			System.exit(-1)
		}
		
		thermometer as it.unibo.basicthermometer.Thermometer
	#]
	
	State s0 initial {
		println("$name | started")
	} Goto work
	
	State work {
		updateResource[# thermometer.readTemperature().toString() #]
	} Transition t0
		whenTime 2000 -> work
		whenMsg updatethermometerstate -> work
}

QActor fanactor context ctxfan {
	
	[# 
		val fan = it.unibo.basicdevices.DeviceManager.requestDevice("fan")
		lateinit var state : it.unibo.basicfan.FanState
		
		if(fan == null) {
			println("$name | unable to use the fan")
			System.exit(-1)
		}
		
		fan as it.unibo.basicfan.Fan
	#]
	
	State s0 initial {
		println("$name | started")
		[# state = fan.getState() #]
	} Goto work
	
	State work {
		updateResource[# state.toString() #]
		println("$name | fan state : ${state.toString()}")
	} Transition t0
		whenMsg fanon -> poweron
		whenMsg fanoff -> poweroff
		whenMsg  updatefanstate -> work
	
	State poweron {
		[# 	fan.powerOn() 
			state = `it.unibo.basicfan`.FanState.ON
		#]
	} Goto work
	
	State poweroff {
		[# 	fan.powerOff()
			state = `it.unibo.basicfan`.FanState.OFF
		#]
	} Goto work
	
}

QActor sonaractor context ctxsonar {
	
	[# 
		val sonar = it.unibo.basicdevices.DeviceManager.requestDevice("outsonar")
		var distance : Int
		
		if(sonar == null) {
			println("$name | unable to use the sonar")
			System.exit(-1)
		}
		
		sonar as it.unibo.basicsonar.Sonar
	#]
	
	State s0 initial {
		println("$name | started")
		[# distance = sonar.readDistance() #]
	} Goto work
	
	State work {
		[# distance = sonar.readDistance() #]
		updateResource[# distance.toString() #]
		println("$name | sonar distance : ${distance}")
	} Transition t0
		whenMsg  updatesonarstate -> work
	
}

QActor weightsensoractor context ctxweightsensor {
	
	[# 
		val sensor = it.unibo.basicdevices.DeviceManager.requestDevice("indoor sensor")
		var weight : Double
		
		if(sensor == null) {
			println("$name | unable to use the weight sensor")
			System.exit(-1)
		}
		
		sensor as it.unibo.basicweightsensor.WeightSensor
	#]
	
	State s0 initial {
		println("$name | started")
	} Goto work
	
	State work {
		[# weight = sensor.readWeight() #]
		updateResource[# weight.toString() #]
		println("$name | weight distance : ${weight}")
	} Transition t0
		whenMsg  updatesensorstate -> work
	
}
