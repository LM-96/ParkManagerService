/* Generated by AN DISI Unibo */ 
package it.unibo.sonaractor

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Sonaractor ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 
				val sonar = it.unibo.basicdevices.DeviceManager.requestDevice("outsonar")
				var distance : Int
				
				if(sonar == null) {
					println("$name | unable to use the sonar")
					System.exit(-1)
				}
				
				sonar as it.unibo.basicsonar.Sonar
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("$name | started")
						 distance = sonar.readDistance()  
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						 distance = sonar.readDistance()  
						updateResourceRep( distance.toString()  
						)
						println("$name | sonar distance : ${distance}")
					}
					 transition(edgeName="t05",targetState="work",cond=whenDispatch("updatesonarstate"))
				}	 
			}
		}
}
