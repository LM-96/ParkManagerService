/* Generated by AN DISI Unibo */ 
package it.unibo.fanactor

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Fanactor ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 
				val fan = it.unibo.basicdevices.DeviceManager.requestDevice("fan")
				lateinit var state : it.unibo.basicfan.FanState
				
				if(fan == null) {
					println("$name | unable to use the fan")
					System.exit(-1)
				}
				
				fan as it.unibo.basicfan.Fan
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("$name | started")
						 state = fan.getState()  
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						updateResourceRep( state.toString()  
						)
						println("$name | fan state : ${state.toString()}")
					}
					 transition(edgeName="t00",targetState="poweron",cond=whenDispatch("fanon"))
					transition(edgeName="t01",targetState="poweroff",cond=whenDispatch("fanoff"))
					transition(edgeName="t02",targetState="work",cond=whenDispatch("updatefanstate"))
				}	 
				state("poweron") { //this:State
					action { //it:State
						 	fan.powerOn() 
									state = `it.unibo.basicfan`.FanState.ON
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("poweroff") { //this:State
					action { //it:State
						 	fan.powerOff()
									state = `it.unibo.basicfan`.FanState.OFF
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
}
