/* Generated by AN DISI Unibo */ 
package it.unibo.weightsensoractor

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Weightsensoractor ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 
				val sensor = it.unibo.basicdevices.DeviceManager.requestDevice("indoor sensor")
				var WEIGHT : Double
				var STATE = ""
				var JSONSTATE = ""
				var POLLING_TIME : Long = 1000
				val MIN_WEIGHT = 0.1
				
				if(sensor == null) {
					println("$name | unable to use the weight sensor")
					System.exit(-1)
				}
				
				sensor as it.unibo.basicweightsensor.WeightSensor
				
				WEIGHT = sensor.readWeight()
				if(WEIGHT < MIN_WEIGHT)	STATE = "off"
				else STATE = "on"
				JSONSTATE = "{\"weight\":\"$WEIGHT\",\"state\":\"$STATE\"}"
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("$name | started")
						updateResourceRep( JSONSTATE  
						)
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						println("$name | last state : ${JSONSTATE}")
					}
					 transition(edgeName="t08",targetState="setpolling",cond=whenDispatch("dopolling"))
				}	 
				state("setpolling") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("dopolling(TIME)"), Term.createTerm("dopolling(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 POLLING_TIME = payloadArg(0).toLong()  
						}
						println("$name | started polling with time $POLLING_TIME")
					}
					 transition( edgeName="goto",targetState="polling", cond=doswitch() )
				}	 
				state("polling") { //this:State
					action { //it:State
						 
									WEIGHT = sensor.readWeight() 
									
									if(STATE.equals("off") && WEIGHT > MIN_WEIGHT) {
										STATE = "on"
						emit("weighton", "weighton(ON)" ) 
						
									} else if(STATE.equals("on") && WEIGHT < MIN_WEIGHT) {
										STATE = "off"
										
						emit("weightoff", "weightoff(OFF)" ) 
						
									}
									
									JSONSTATE = "{\"weight\":\"$WEIGHT\",\"state\":\"$STATE\"}"
						updateResourceRep( JSONSTATE  
						)
						stateTimer = TimerActor("timer_polling", 
							scope, context!!, "local_tout_weightsensoractor_polling", POLLING_TIME )
					}
					 transition(edgeName="t09",targetState="polling",cond=whenTimeout("local_tout_weightsensoractor_polling"))   
					transition(edgeName="t010",targetState="work",cond=whenDispatch("stoppolling"))
					transition(edgeName="t011",targetState="setpolling",cond=whenDispatch("dopolling"))
				}	 
			}
		}
}
